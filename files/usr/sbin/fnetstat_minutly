#!/bin/sh
# Netmon Nodewatcher (C) 2010-2011 Freifunk Oldenburg
# Update from Wermelskirchen by RubenKelevra 2012-2015 - cyrond@gmail.com
# Lizenz: GPL / AGPL 3.0

OLDIFS=$IFS
IFS='\n'
#fetch untouched stats at first:
cpuusage1=$(cat /proc/stat)
sleep 10
cpuusage2=$(cat /proc/stat)

#reduce stats
softirqs1=$(echo $cpuusage1 | grep "softirq" | tr ' ' '=')
softirqs2=$(echo $cpuusage2 | grep "softirq" | tr ' ' '=')
cpuusage1=$(echo $cpuusage1 | grep ^cpu | grep -v "^cpu " | tr ' ' '=')
cpuusage2=$(echo $cpuusage2 | grep ^cpu | grep -v "^cpu " | tr ' ' '=')
IFS=$OLDIFS

MESH_BR="br-l2mesh"
ADHOC_WIFI="wlan0|wlan1" #more then one with "a|b"
ADHOC_ETH="br-wan" #more then one with "a|b"
WAN_BR="br-wan"
#not in use
CLIENT_WIFI="wlan0-1|wlan1-1" #more then one with "a|b"
BRCTL="/bin/brctl_ff"
WORK_FOLDER="/tmp/"
BASIC_FILENAME="fnetstat"
VAR_FILE="$WORK_FOLDER$BASIC_FILENAME"

#import variables
if [ -f "$VAR_FILE" ]; then
    source "$VAR_FILE"
fi

#check if unique boot-hash has been generated
if [ -z $_BootID ]; then
    _BootID=$(head -1 /dev/urandom | md5sum | awk '{ print $1 }')
fi

echo "{"

echo "\"sys:script\": \"v0.6b\","
echo "\"type\": \"minutly\","
#hostname 
output=`cat /proc/sys/kernel/hostname`
echo "\"sys:hostname\": \"$output\","
#unique boot-hash 
output=`echo $_BootID`
echo "\"sys:boot_id\": \"$output\","
#IPv6 Adresse Global
output=`ifconfig $MESH_BR | grep Scope:Global | awk '{ print $3 }' | sed -e 's/\/64//g'`
echo "\"sys:ip6:global\": \"$output\","
#IPv6 Adresse Link
output=`ifconfig $MESH_BR | grep Scope:Link | awk '{ print $3 }' | sed -e 's/\/64//g'`
echo "\"sys:ip6:link\": \"$output\","
#WAN IPv4 Adresse
output=`ifconfig $WAN_BR | grep 'inet addr' | awk '{ print $2}' | sed -e 's/addr://g'`
echo "\"sys:wan:ip4\": \"$output\","
#WAN IPv6 Adresse
output=`ifconfig $WAN_BR | grep Scope:Global | awk '{ print $3 }' | sed -e 's/\/64//g'`
echo "\"sys:wan:ip6\": \"$output\","
#WAN IPv4 Connection
output=`ping -q -I $WAN_BR 8.8.8.8 -c 4 -W 5 >/dev/null 2>&1 && echo 1`
[ -z "$output" ] && output=0
echo "\"sys:wan:ip4:work\": $output,"
#WAN IPv6 Connection
output=`ping -q -I $WAN_BR 2001:4860:4860::8888 -c 4 -W 5 >/dev/null 2>&1 && echo 1`
[ -z "$output" ] && output=0
echo "\"sys:wan:ip6:work\": \"$output\","
#uptime, localtime & idletime
output=`cat /proc/uptime | awk '{ print $1 }'`
echo "\"sys:uptime\": $output,"
output=`date -Iseconds`
echo "\"sys:localtime\": \"$output\","
output=`cat /proc/uptime | awk '{ print $2 }'`
echo "\"sys:idletime\": $output,"
#sysinfo memory
echo "\"sys:memory\": {"
output=`cat /proc/meminfo | grep 'MemTotal' | awk '{ print $2 }'`
echo "  \"total\": $output,"
output=`cat /proc/meminfo | grep -m 1 'Cached:' | awk '{ print $2 }'`
echo "  \"caching\": $output,"
output=`cat /proc/meminfo | grep 'Buffers' | awk '{ print $2 }'`
echo "  \"buffering\": $output,"
output=`cat /proc/meminfo | grep 'MemFree' | awk '{ print $2 }'`
echo "  \"free\": $output"
echo "  },"
output=`cat /proc/loadavg | awk '{ print $4 }'`
echo "\"sys:processes\": \"$output\","
output=`cat /proc/loadavg | awk '{ print $1 }'`
echo "\"sys:loadavg\": $output,"

echo "\"sys:cpu\": ["
OLDIFS=$IFS
IFS='\n'
b="0"
for entry in $cpuusage1; do
    if [ "$b" -eq "1" ]; then
        echo ","
    else
        b="1"
    fi

    echo -en "  {"
    cpu=$(echo $entry | cut -d '=' -f 1)
    echo " \"cpu\": \"$cpu\","

    user=$(expr $(echo $cpuusage2 | grep "$cpu" | cut -d '=' -f 2) - $(echo $entry | cut -d '=' -f 2))
    nice=$(expr $(echo $cpuusage2 | grep "$cpu" | cut -d '=' -f 3) - $(echo $entry | cut -d '=' -f 3))
    system=$(expr $(echo $cpuusage2 | grep "$cpu" | cut -d '=' -f 4) - $(echo $entry | cut -d '=' -f 4))
    idle=$(expr $(echo $cpuusage2 | grep "$cpu" | cut -d '=' -f 5) - $(echo $entry | cut -d '=' -f 5))
    iowait=$(expr $(echo $cpuusage2 | grep "$cpu" | cut -d '=' -f 6) - $(echo $entry | cut -d '=' -f 6))
    irq=$(expr $(echo $cpuusage2 | grep "$cpu" | cut -d '=' -f 7) - $(echo $entry | cut -d '=' -f 7))
    sirq=$(expr $(echo $cpuusage2 | grep "$cpu" | cut -d '=' -f 8) - $(echo $entry | cut -d '=' -f 8))
    
    total=$(expr $user + $nice + $system + $idle + $iowait + $irq + $sirq)
    
    user=$(awk "BEGIN {printf \"%.2f\",$user/($total/100)}")
    nice=$(awk "BEGIN {printf \"%.2f\",$nice/($total/100)}")
    system=$(awk "BEGIN {printf \"%.2f\",$system/($total/100)}")
    idle=$(awk "BEGIN {printf \"%.2f\",$idle/($total/100)}")
    iowait=$(awk "BEGIN {printf \"%.2f\",$iowait/($total/100)}")
    irq=$(awk "BEGIN {printf \"%.2f\",$irq/($total/100)}")
    sirq=$(awk "BEGIN {printf \"%.2f\",$sirq/($total/100)}")
    
    echo "    \"user\": $user,"
    echo "    \"nice\": $nice,"
    echo "    \"system\": $system,"
    echo "    \"idle\": $idle,"
    echo "    \"iowait\": $iowait,"
    echo "    \"irq\": $irq,"
    echo "    \"sirq\": $sirq"
    
    echo -en "  }"
done



if [ $b -eq "1" ]; then
    echo ""
fi

echo "  ],"

IFS=$OLDIFS
unset cpu user nice system idle iowait irq sirq OLDIFS b

echo "\"sys:softirqs\": {"
#softirqs fetched for 10 seconds, output avg/sec
OLDIFS=$IFS
IFS='\n'

output=$(expr $(echo $softirqs2 | cut -d '=' -f 3) - $(echo $softirqs1 | cut -d '=' -f 3))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"HI\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 4) - $(echo $softirqs1 | cut -d '=' -f 4))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"TIMER\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 5) - $(echo $softirqs1 | cut -d '=' -f 5))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"NET_TX\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 6) - $(echo $softirqs1 | cut -d '=' -f 6))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"NET_RX\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 7) - $(echo $softirqs1 | cut -d '=' -f 7))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"BLOCK\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 8) - $(echo $softirqs1 | cut -d '=' -f 8))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"BLOCK_IOPOLL\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 9) - $(echo $softirqs1 | cut -d '=' -f 9))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"TASKLET\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 10) - $(echo $softirqs1 | cut -d '=' -f 10))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"SCHED\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 11) - $(echo $softirqs1 | cut -d '=' -f 11))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"HRTIMER\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 12) - $(echo $softirqs1 | cut -d '=' -f 12))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"RCU\": $output"

echo "  }"

IFS=$OLDIFS

unset cpu user nice system idle iowait irq sirq OLDIFS b

echo "\"traffic\": ["
IFACES=`cat /proc/net/dev | awk -F: '!/\|/ { gsub(/[[:space:]]*/, "", $1); split($2, a, " "); printf("%s=%s=%s=%s ", $1, a[1], a[9], a[4]) }'`

b="0"
for entry in $IFACES; do
    if [ $b -eq "1" ]; then
        echo ","
    else
        b="1"
    fi
    
    echo -en "  {"
    output=`echo $entry | cut -d '=' -f 1`
    echo " \"interface\": \"$output\","
    output=`echo $entry | cut -d '=' -f 2`
    echo "    \"rx\": $output,"
    output=`echo $entry | cut -d '=' -f 3`
    echo "    \"tx\": $output,"
    output=`echo $entry | cut -d '=' -f 4`
    echo "    \"drop\": $output"
    echo -en "  }"
done

if [ $b -eq "1" ]; then
    echo ""
fi

echo "  ],"

unset b entry

#B.A.T.M.A.N. advanced
if which batctl >/dev/null; then
    if [ "$(batctl o | grep 'No batman nodes in range')" == "" ]; then
        OLDIFS=$IFS
        IFS="
"
        
        BAT_O_WIFI=`batctl o | awk '/O/ {next} /B/ {next} {print}'  | grep -E "$ADHOC_WIFI"`
        echo "\"batman:wifi:originators\": ["
        b="0"
        
        for row in $BAT_O_WIFI; do
            originator=`echo $row | awk '{print $1}'`
            next_hop=`echo $row | awk '{print $4}'`
            last_seen=`echo $row | awk '{print $2}'`
            last_seen="${last_seen//s/}"
            link_quality=`echo $row | awk '{print $3}'`
            link_quality="${link_quality//(/}"
            link_quality="${link_quality//)/}"
            
            if [ "$next_hop" == "$originator" ]; then
                if [ $b -eq "1" ]; then
                    echo ","
                else
                    b="1"
                fi
                echo -en "  {"
                echo " \"originator\": \"$originator\","
                echo "    \"last_seen\": \"$last_seen\","
                echo "    \"linkquality\": \"$link_quality\","
                echo -en "  }"
            fi
        done
        unset BAT_O_WIFI
        
        if [ $b -eq "1" ]; then
            echo ""
        fi

        echo "  ],"
        
        BAT_O_ETH=`batctl o | awk '/O/ {next} /B/ {next} {print}' | grep -E "$ADHOC_ETH"`
        echo "\"batman:eth:originators\": ["
        b="0"
        
        for row in $BAT_O_ETH; do
            originator=`echo $row | awk '{print $1}'`
            next_hop=`echo $row | awk '{print $4}'`
            last_seen=`echo $row | awk '{print $2}'`
            last_seen="${last_seen//s/}"
            link_quality=`echo $row | awk '{print $3}'`
            link_quality="${link_quality//(/}"
            link_quality="${link_quality//)/}"
            
            if [ "$next_hop" == "$originator" ]; then
                if [ $b -eq "1" ]; then
                    echo ","
                else
                    b="1"
                fi
                echo -en "  {"
                echo " \"originator\": \"$originator\","
                echo "    \"last_seen\": \"$last_seen\","
                echo "    \"linkquality\": \"$link_quality\","
                echo -en "  }"
            fi
        done
        unset BAT_O_ETH
        
        if [ $b -eq "1" ]; then
            echo ""
        fi

        echo "  ],"
        
        IFS=$OLDIFS
    fi
    
    unset OLDIFS originator last_seen link_quality
    
    #batman-adv statistics
    BATISTICS=`batctl s | awk '{ print $2 }'`
    echo "\"batman:statistics\": {"

    i=0
    for row in $BATISTICS; do    
        if [ $i == "0" ]; then        
            echo "  \"tx\": \"$row\","
        elif [ $i == 1 ]; then
            echo "  \"tx_bytes\": $row,"
        elif [ $i == 2 ]; then
            echo "  \"tx_dropped\": $row,"
        elif [ $i == 3 ]; then
            echo "  \"rx\": $row,"
        elif [ $i == 4 ]; then
            echo "  \"rx_bytes\": $row,"
        elif [ $i == 5 ]; then
            echo "  \"forward\": $row,"
        elif [ $i == 6 ]; then
            echo "  \"forward_bytes\": $row,"
        elif [ $i == 7 ]; then
            echo "  \"mgmt_tx\": $row,"
        elif [ $i == 8 ]; then
            echo "  \"mgmt_tx_bytes\": $row,"
        elif [ $i == 9 ]; then
            echo "  \"mgmt_rx\": $row,"
        elif [ $i == 10 ]; then
            echo "  \"mgmt_rx_bytes\": $row"
        elif [ $i == 11 ]; then
            break
        fi
        
        i=$(($i + 1))
    done
    echo "  },"
    unset row BATISTICS
fi

if which $BRCTL >/dev/null; then

    #CLIENTS
    SEDDEV=`$BRCTL showstp $MESH_BR | egrep '\([0-9]\)' | sed -e "s/(//;s/)//" | awk '{ print "s/^  "$2"/"$1"/;" }'`
        
    CLIENT_MACS=$CLIENT_MACS`$BRCTL showmacs $MESH_BR | sed -e "$SEDDEV" | awk '{if ($3 != "yes" && $1 == "'"$entry"'") print $2}'`" "

                        
    output=0
    for client in $CLIENT_MACS; do
        output=`expr $i + 1`
    done
    unset CLIENT_MACS SEDDEV
    echo "\"ap:clients\": $output"

else
    echo "\"ap:clients\": -1"
fi

echo "}"

echo "_BootID=$_BootID" > "$VAR_FILE"